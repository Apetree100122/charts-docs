<%
=begin
apps: wordpress
platforms: kubernetes
id: production_configuration
title: Production configuration
category: configuration
weight: 20
highlight: 20
=end %>

This chart includes a *values-production.yaml* file where you can find some parameters oriented to production configuration in comparison to the regular *values.yaml*. You can use this file instead of the default one.

* Set Apache AllowOverride directive to "None":

    - allowOverrideNone: false
    + allowOverrideNone: true

* Number of WordPress Pods to run:

    - replicaCount: 1
    + replicaCount: 3

* Enable client source IP preservation:

    - service.externalTrafficPolicy: Cluster
    + service.externalTrafficPolicy: Local

* PVC Access Mode:

    - persistence.accessMode: ReadWriteOnce
    + ## To use the /admin portal and to ensure you can scale wordpress you need to provide a
    + ## ReadWriteMany PVC, if you dont have a provisioner for this type of storage
    + ## We recommend that you install the nfs provisioner and map it to a RWO volume
    + ## helm install nfs-server stable/nfs-server-provisioner --set persistence.enabled=true,persistence.size=10Gi
    + ##
    + persistence.accessMode: ReadWriteMany

* Start a side-car Prometheus exporter:

    - metrics.enabled: false
    + metrics.enabled: true

Note that *values-production.yaml* includes a replicaCount of 3, so there will be 3 WordPress pods. As a result, to use the "/admin" portal and to ensure you can scale wordpress you need to provide a ReadWriteMany PVC, if you don't have a provisioner for this type of storage, we recommend that you install the NFS provisioner chart (with the correct parameters, such as persistence.enabled=true and persistence.size=10Gi) and map it to a RWO volume.

Then you can deploy WordPress chart using the proper parameters:

~~~
persistence.storageClass=nfs
mariadb.master.persistence.storageClass=nfs
~~~
