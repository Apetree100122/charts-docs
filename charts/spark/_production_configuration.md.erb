<%
=begin
apps: spark
platforms: kubernetes
id: production_configuration
title:  Production configuration
category: configuration
weight: 20
highlight: 20
=end %>

This chart includes a *values-production.yaml* file where you can find some parameters oriented to production configuration in comparison to the regular *values.yaml*:

* Enable ingress controller:

    - ingress.enabled: false
    + ingress.enabled: true

* Enable RPC authentication and encryption:

    - security.rpc.authenticationEnabled: false
    - security.rpc.encryptionEnabled: false
    + security.rpc.authenticationEnabled: true
    + security.rpc.encryptionEnabled: true

* Enable storage encryption:

    - security.storageEncryptionEnabled: false
    + security.storageEncryptionEnabled: true

* Configure SSL parameters:

    - security.ssl.enabled: false
    - security.ssl.needClientAuth: false
    + security.ssl.enabled: true
    + security.ssl.needClientAuth: true

* Set a secret name for passwords:

    + security.passwordsSecretName: my-passwords-secret

* Set a secret name for certificates:

    + security.certificatesSecretName: my-certificates-secret

* Enable autoscaling depending on CPU:

    - worker.autoscaling.enabled: false
    - worker.autoscaling.replicasMax: 5
    + worker.autoscaling.enabled: true
    + worker.autoscaling.replicasMax: 10

### Using custom configuration

To use a custom configuration a ConfigMap should be created with the spark-env.sh file inside the ConfigMap. The ConfigMap name must be provided at deployment time, to set the configuration on the master use: master.configurationConfigMap=configMapName

To set the configuration on the worker use: worker.configurationConfigMap=configMapName

It can be set both at the same time with the same ConfigMap or using two ConfigMaps. Also, you can provide in the ConfigMap a spark-defaults.conf file. You can use both files without the other.
