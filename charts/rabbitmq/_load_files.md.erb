<%
=begin
apps: rabbitmq
platforms: kubernetes
id: load_files
title: Load Definitions
category: administration
weight: 20
=end %>

It is possible to [load a RabbitMQ definitions file to configure RabbitMQ](https://www.rabbitmq.com/management.html#load-definitions). Because definitions may contain RabbitMQ credentials, [store the JSON as a Kubernetes secret](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod). Within the secret's data, choose a key name that corresponds with the desired load definitions filename (i.e. *load_definition.json*) and use the JSON object as the value. For example:

~~~
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-load-definition
type: Opaque
stringData:
  load_definition.json: |-
    {
      "vhosts": [
        {
          "name": "/"
        }
      ]
    }
~~~

Then, specify the management.load_definitions property as an extraConfiguration pointing to the load definition file path within the container (i.e. */app/load_definition.json*) and set loadDefinition.enable to *true*.

Any load definitions specified will be available within in the container at */app*.

> NOTE: Loading a definition will take precedence over any configuration done through [Helm values](https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq#parameters).

If needed, you can use extraSecrets to let the chart create the secret for you. This way, you don't need to manually create it before deploying a release. For example :

~~~
extraSecrets:
  load-definition:
    load_definition.json: |
      {
        "vhosts": [
          {
            "name": "/"
          }
        ]
      }
rabbitmq:
  loadDefinition:
    enabled: true
    secretName: load-definition
  extraConfiguration: |
    management.load_definitions = /app/load_definition.json
~~~
