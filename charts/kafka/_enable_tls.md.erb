<%
=begin
apps: kafka
platforms: kubernetes
id: enable_tls
title: Enable TLS
category: administration
weight: 20
highlight: 20
=end %>

In order to configure TLS authentication/encryption, you must create a secret containing the Java Key Stores (JKS) files: the truststore (*kafka.truststore.jks*) and one keystore (*kafka.keystore.jks*) per Kafka broker you have in the cluster. Then, you need pass the secret name with the *--auth.jksSecret* parameter when deploying the chart.

> NOTE: If the JKS files are password protected (recommended), you will need to provide the password to get access to the keystores. To do so, use the *auth.jksPassword* parameter to provide your password.

For instance, to configure TLS authentication on a Kafka cluster with 2 Kafka brokers use the command below to create the secret:

    $ kubectl create secret generic kafka-jks --from-file=./kafka.truststore.jks --from-file=./kafka-0.keystore.jks --from-file=./kafka-1.keystore.jks

> NOTE: The command above assumes you already created the trustore and keystores files. This script can help you with the JKS files generation.

As an alternative to manually create the secret before installing the chart, you can put your JKS files inside the chart folder files/jks, an a secret including them will be generated. Please note this alternative requires to have the chart downloaded locally, so you will have to clone this repository or fetch the chart before installing it.

You can deploy the chart with authentication using the following parameters:

~~~
replicaCount=2
auth.clientProtocol=sasl
auth.interBrokerProtocol=tls
auth.certificatesSecret=kafka-jks
auth.certificatesPassword=jksPassword
auth.jaas.clientUser=brokerUser
auth.jaas.clientPassword=brokerPassword
auth.jaas.zookeeperUser=zookeeperUser
auth.jaas.zookeeperPassword=zookeeperPassword
zookeeper.auth.enabled=true
zookeeper.auth.serverUsers=zookeeperUser
zookeeper.auth.serverPasswords=zookeeperPassword
zookeeper.auth.clientUser=zookeeperUser
zookeeper.auth.clientPassword=zookeeperPassword
~~~

If you also enable exposing metrics using the Kafka expoter, and you are using *sasl_tls*, *tls*, or *mtls* authentication protocols, you need to mount the CA certificated used to sign the brokers certificates in the exporter so it can validate the Kafka brokers. To do so, create a secret containing the CA, and set the metrics.certificatesSecret parameter. As an alternative, you can skip TLS validation using extra flags:

    $ metrics.kafka.extraFlags={tls.insecure-skip-tls-verify: ""}