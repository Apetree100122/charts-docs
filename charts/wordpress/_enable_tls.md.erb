<%
=begin
apps: wordpress
platforms: kubernetes
id: enable_tls
title: Enable TLS for WordPress
category: administration
weight: 20
highlight: 20
=end %>

This chart will facilitate the creation of TLS secrets for use with the ingress controller, however, this is not required. There are three common use cases:

* Helm generates/manages certificate secrets
* User generates/manages certificates separately
* An additional tool (like kube-lego) manages the secrets for the application

In the first two cases, one will need a certificate and a key. They typically look like this:

* Certificate files should look like (and there can be more than one certificate if there is a certificate chain)

~~~
-----BEGIN CERTIFICATE-----
MIID6TCCAtGgAwIBAgIJAIaCwivkeB5EMA0GCSqGSIb3DQEBCwUAMFYxCzAJBgNV
...
jScrvkiBO65F46KioCL9h5tDvomdU1aqpI/CBzhvZn1c0ZTf87tGQR8NK7v7
-----END CERTIFICATE-----
~~~

* Keys should look like:

~~~
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvLYcyu8f3skuRyUgeeNpeDvYBCDcgq+LsWap6zbX5f8oLqp4
...
wrj2wDbCDCFmfqnSJ+dKI3vFLlEz44sAV8jX/kd4Y6ZTQhlLbYc=
-----END RSA PRIVATE KEY-----
~~~

If you are going to use Helm to manage the certificates, please copy these values into the certificate and key values for a given ingress.secrets entry.

If you are going to manage TLS secrets outside of Helm, please know that you can create a TLS secret (named *wordpress.local-tls* for example).

Please see this [example](https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tls) for more information.
