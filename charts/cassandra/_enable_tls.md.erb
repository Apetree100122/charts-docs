<%
=begin
apps: cassandra
platforms: kubernetes, tanzu-application-catalog
id: enable_tls
title: Enable TLS
category: administration
weight: 20
highlight: 20
=end %>

This chart supports TLS between client and server and between nodes, as explained below:

* For internode cluster encryption, set the *tls.internodeEncryption* chart parameter to a value different from *none*. Available values are *all*, *dc* or *rack*.

* For client-server encryption, set the *tls.clientEncryption* chart parameter to *true*.

In both cases, it is also necessary to create a secret containing the keystore and truststore certificates and their corresponding protection passwords. This secret is to be passed to the chart via the `tls.existingSecret` parameter at deployment-time, as shown below:

~~~
tls.internodeEncryption=all
tls.clientEncryption=true
tls.existingSecret=my-exisiting-stores
tls.passwordsSecret=my-stores-password
~~~

> TIP: The secret may be created in the standard way with the *--from-file=./keystore*, *--from-file=./truststore*, *--from-literal=keystore-password=KEYSTORE_PASSWORD* and *--from-literal=truststore-password=TRUSTSTORE_PASSWORD* options. This assumes that the stores are in the current working directory and the KEYSTORE_PASSWORD and TRUSTSTORE_PASSWORD placeholders are replaced with the correct keystore and truststore passwords respectively. Example:

~~~
$ kubectl create secret generic my-exisiting-stores --from-file=./keystore --from-file=./truststore
$ kubectl create secret generic my-stores-password --from-literal=keystore-password=KEYSTORE_PASSWORD --from-literal=truststore-password=TRUSTSTORE_PASSWORD
~~~

Keystore and Truststore files can be dinamycally created from the certificates files. In this case a secret with the tls.crt, tls.key and ca.crt in pem format is required. The following example shows how the secret can be created and assumes that all certificate files are in the working directory:

~~~
$ kubectl create secret tls my-certs --cert ./tls.crt --key ./tls.key
$ kubectl patch secret my-certs -p="{\"data\":{\"ca.crt\": \"$(cat ./ca.crt | base64 )\"}}"
~~~

To enable this feature ~tls.autoGenerated~ must be set and the new secret should be set in ~tls.certificateSecret~:

~~~
tls.internodeEncryption=all
tls.clientEncryption=true
tls.autoGenerated=true
tls.certificatesSecret=my-certs
tls.passwordsSecret=my-stores-password
~~~
